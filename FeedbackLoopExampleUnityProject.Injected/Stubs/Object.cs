using System;

/// <summary>
/// This file is provided so that unity engine classes can be swapped out
/// during running in a reloadable context, enabling runninf of game code
/// outside of the unity engine. The classes are generated by using the
/// 'Go to Definition' in VS, and copying out the definition into this file.
/// All methods and getters and then set to return <see cref="NotImplementedException"/>,
/// and only methods used by the scenario are made to work (such as Input,
/// and Scene Traversal mechanisms)
/// </summary>
namespace FL
{
    /// <summary>
    /// Replacement Class for <see cref="UnityEngine.Object" />
    /// </summary>
    public partial class Object
    {
        //
        // Summary:
        //     The name of the object.
        public string name { get; set; }
        //
        // Summary:
        //     Should the object be hidden, saved with the Scene or modifiable by the user?
        public UnityEngine.HideFlags hideFlags { get; set; }

        //
        // Summary:
        //     Removes a gameobject, component or asset.
        //
        // Parameters:
        //   obj:
        //     The object to destroy.
        //
        //   t:
        //     The optional amount of time to delay before destroying the object.
        //[ExcludeFromDocs]
        public static void Destroy(Object obj) => throw new NotImplementedException();
        //
        // Summary:
        //     Removes a gameobject, component or asset.
        //
        // Parameters:
        //   obj:
        //     The object to destroy.
        //
        //   t:
        //     The optional amount of time to delay before destroying the object.
        //[NativeMethod(Name = "Scripting::DestroyObjectFromScripting", IsFreeFunction = true, ThrowsException = true)]
        public static void Destroy(Object obj, float t) => throw new NotImplementedException();
        //
        // Summary:
        //     Destroys the object obj immediately. You are strongly recommended to use Destroy
        //     instead.
        //
        // Parameters:
        //   obj:
        //     Object to be destroyed.
        //
        //   allowDestroyingAssets:
        //     Set to true to allow assets to be destroyed.
        //[NativeMethod(Name = "Scripting::DestroyObjectFromScriptingImmediate", IsFreeFunction = true, ThrowsException = true)]
        public static void DestroyImmediate(Object obj, bool allowDestroyingAssets) => throw new NotImplementedException();
        //
        // Summary:
        //     Destroys the object obj immediately. You are strongly recommended to use Destroy
        //     instead.
        //
        // Parameters:
        //   obj:
        //     Object to be destroyed.
        //
        //   allowDestroyingAssets:
        //     Set to true to allow assets to be destroyed.
        //[ExcludeFromDocs]
        public static void DestroyImmediate(Object obj) => throw new NotImplementedException();
        //
        // Summary:
        //     Do not destroy the target Object when loading a new Scene.
        //
        // Parameters:
        //   target:
        //     An Object not destroyed on Scene change.
        //[FreeFunction("GetSceneManager().DontDestroyOnLoad")]
        public static void DontDestroyOnLoad(Object target) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns the first active loaded object of Type type.
        //
        // Parameters:
        //   type:
        //     The type of object to find.
        //
        // Returns:
        //     This returns the Object that matches the specified type. It returns null if no
        //     Object matches the type.
        //[TypeInferenceRule(TypeInferenceRules.TypeReferencedByFirstArgument)]
        public static Object FindObjectOfType(Type type) => throw new NotImplementedException();
        public static T FindObjectOfType<T>() where T : Object => throw new NotImplementedException();
        public static T[] FindObjectsOfType<T>() where T : Object => throw new NotImplementedException();
        //
        // Summary:
        //     Returns a list of all active loaded objects of Type type.
        //
        // Parameters:
        //   type:
        //     The type of object to find.
        //
        // Returns:
        //     The array of objects found matching the type specified.
        //[FreeFunction("UnityEngineObjectBindings::FindObjectsOfType")]
        //[TypeInferenceRule(TypeInferenceRules.ArrayOfTypeReferencedByFirstArgument)]
        public static Object[] FindObjectsOfType(Type type) => throw new NotImplementedException();

        //
        // Summary:
        //     Clones the object original and returns the clone.
        //
        // Parameters:
        //   original:
        //     An existing object that you want to make a copy of.
        //
        //   position:
        //     Position for the new object.
        //
        //   rotation:
        //     Orientation of the new object.
        //
        //   parent:
        //     Parent that will be assigned to the new object.
        //
        //   instantiateInWorldSpace:
        //     Pass true when assigning a parent Object to maintain the world position of the
        //     Object, instead of setting its position relative to the new parent. Pass false
        //     to set the Object's position relative to its new parent.
        //
        // Returns:
        //     The instantiated clone.
        //[TypeInferenceRule(TypeInferenceRules.TypeOfFirstArgument)]
        public static Object Instantiate(Object original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, Transform parent) => throw new NotImplementedException();
        //
        // Summary:
        //     Clones the object original and returns the clone.
        //
        // Parameters:
        //   original:
        //     An existing object that you want to make a copy of.
        //
        //   position:
        //     Position for the new object.
        //
        //   rotation:
        //     Orientation of the new object.
        //
        //   parent:
        //     Parent that will be assigned to the new object.
        //
        //   instantiateInWorldSpace:
        //     Pass true when assigning a parent Object to maintain the world position of the
        //     Object, instead of setting its position relative to the new parent. Pass false
        //     to set the Object's position relative to its new parent.
        //
        // Returns:
        //     The instantiated clone.
        //[TypeInferenceRule(TypeInferenceRules.TypeOfFirstArgument)]
        public static Object Instantiate(Object original) => throw new NotImplementedException();
        //
        // Summary:
        //     Clones the object original and returns the clone.
        //
        // Parameters:
        //   original:
        //     An existing object that you want to make a copy of.
        //
        //   position:
        //     Position for the new object.
        //
        //   rotation:
        //     Orientation of the new object.
        //
        //   parent:
        //     Parent that will be assigned to the new object.
        //
        //   instantiateInWorldSpace:
        //     Pass true when assigning a parent Object to maintain the world position of the
        //     Object, instead of setting its position relative to the new parent. Pass false
        //     to set the Object's position relative to its new parent.
        //
        // Returns:
        //     The instantiated clone.
        //[TypeInferenceRule(TypeInferenceRules.TypeOfFirstArgument)]
        public static Object Instantiate(Object original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation) => throw new NotImplementedException();
        public static T Instantiate<T>(T original, Transform parent, bool worldPositionStays) where T : Object => throw new NotImplementedException();
        public static T Instantiate<T>(T original, Transform parent) where T : Object => throw new NotImplementedException();
        public static T Instantiate<T>(T original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, Transform parent) where T : Object => throw new NotImplementedException();
        public static T Instantiate<T>(T original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation) where T : Object => throw new NotImplementedException();
        public static T Instantiate<T>(T original) where T : Object => throw new NotImplementedException();
        //
        // Summary:
        //     Clones the object original and returns the clone.
        //
        // Parameters:
        //   original:
        //     An existing object that you want to make a copy of.
        //
        //   position:
        //     Position for the new object.
        //
        //   rotation:
        //     Orientation of the new object.
        //
        //   parent:
        //     Parent that will be assigned to the new object.
        //
        //   instantiateInWorldSpace:
        //     Pass true when assigning a parent Object to maintain the world position of the
        //     Object, instead of setting its position relative to the new parent. Pass false
        //     to set the Object's position relative to its new parent.
        //
        // Returns:
        //     The instantiated clone.
        //[TypeInferenceRule(TypeInferenceRules.TypeOfFirstArgument)]
        public static Object Instantiate(Object original, Transform parent, bool instantiateInWorldSpace) => throw new NotImplementedException();
        //
        // Summary:
        //     Clones the object original and returns the clone.
        //
        // Parameters:
        //   original:
        //     An existing object that you want to make a copy of.
        //
        //   position:
        //     Position for the new object.
        //
        //   rotation:
        //     Orientation of the new object.
        //
        //   parent:
        //     Parent that will be assigned to the new object.
        //
        //   instantiateInWorldSpace:
        //     Pass true when assigning a parent Object to maintain the world position of the
        //     Object, instead of setting its position relative to the new parent. Pass false
        //     to set the Object's position relative to its new parent.
        //
        // Returns:
        //     The instantiated clone.
        //[TypeInferenceRule(TypeInferenceRules.TypeOfFirstArgument)]
        public static Object Instantiate(Object original, Transform parent) => throw new NotImplementedException();
        public override bool Equals(object other) => throw new NotImplementedException();
        public override int GetHashCode() => throw new NotImplementedException();
        //
        // Summary:
        //     Returns the instance id of the object.
        //[SecuritySafeCritical]
        public int GetInstanceID() => throw new NotImplementedException();
        //
        // Summary:
        //     Returns the name of the GameObject.
        //
        // Returns:
        //     The name returned by ToString.
        public override string ToString() => throw new NotImplementedException();
    }
}