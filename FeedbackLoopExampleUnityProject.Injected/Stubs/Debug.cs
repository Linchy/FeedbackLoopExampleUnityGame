using System;

/// <summary>
/// This file is provided so that unity engine classes can be swapped out
/// during running in a reloadable context, enabling runninf of game code
/// outside of the unity engine. The classes are generated by using the
/// 'Go to Definition' in VS, and copying out the definition into this file.
/// All methods and getters and then set to return <see cref="NotImplementedException"/>,
/// and only methods used by the scenario are made to work (such as Input,
/// and Scene Traversal mechanisms)
/// </summary>
namespace FL
{
    //
    // Summary:
    //     Class containing methods to ease debugging while developing a game.
    //[NativeHeader("Runtime/Export/Debug.bindings.h")]
    public partial class Debug
    {
        //
        // Summary:
        //     Reports whether the development console is visible. The development console cannot
        //     be made to appear using:
        public static bool developerConsoleVisible { get; set; }
        //
        // Summary:
        //     Get default debug logger.
        public static UnityEngine.ILogger unityLogger { get; }
        //
        // Summary:
        //     In the Build Settings dialog there is a check box called "Development Build".
        //[NativeProperty(TargetType = TargetType.Field)]
        //[StaticAccessor("GetBuildSettings()", StaticAccessorType.Dot)]
        public static bool isDebugBuild { get; }


        //[Conditional("UNITY_ASSERTIONS")]
        public static void Assert(bool condition, string message, Object context) { }
        //
        // Summary:
        //     Assert a condition and logs an error message to the Unity console on failure.
        //
        // Parameters:
        //   condition:
        //     Condition you expect to be true.
        //
        //   context:
        //     Object to which the message applies.
        //
        //   message:
        //     String or object to be converted to string representation for display.
        //[Conditional("UNITY_ASSERTIONS")]
        public static void Assert(bool condition, object message, Object context) { }
        //[Conditional("UNITY_ASSERTIONS")]
        public static void Assert(bool condition, string message) { }
        //
        // Summary:
        //     Assert a condition and logs an error message to the Unity console on failure.
        //
        // Parameters:
        //   condition:
        //     Condition you expect to be true.
        //
        //   context:
        //     Object to which the message applies.
        //
        //   message:
        //     String or object to be converted to string representation for display.
        //[Conditional("UNITY_ASSERTIONS")]
        public static void Assert(bool condition, object message) { }
        //
        // Summary:
        //     Assert a condition and logs an error message to the Unity console on failure.
        //
        // Parameters:
        //   condition:
        //     Condition you expect to be true.
        //
        //   context:
        //     Object to which the message applies.
        //
        //   message:
        //     String or object to be converted to string representation for display.
        //[Conditional("UNITY_ASSERTIONS")]
        public static void Assert(bool condition, Object context) { }
        //
        // Summary:
        //     Assert a condition and logs an error message to the Unity console on failure.
        //
        // Parameters:
        //   condition:
        //     Condition you expect to be true.
        //
        //   context:
        //     Object to which the message applies.
        //
        //   message:
        //     String or object to be converted to string representation for display.
        //[Conditional("UNITY_ASSERTIONS")]
        public static void Assert(bool condition) { }

        //
        // Summary:
        //     Assert a condition and logs a formatted error message to the Unity console on
        //     failure.
        //
        // Parameters:
        //   condition:
        //     Condition you expect to be true.
        //
        //   format:
        //     A composite format string.
        //
        //   args:
        //     Format arguments.
        //
        //   context:
        //     Object to which the message applies.
        //[Conditional("UNITY_ASSERTIONS")]
        public static void AssertFormat(bool condition, string format, params object[] args) { }
        //
        // Summary:
        //     Assert a condition and logs a formatted error message to the Unity console on
        //     failure.
        //
        // Parameters:
        //   condition:
        //     Condition you expect to be true.
        //
        //   format:
        //     A composite format string.
        //
        //   args:
        //     Format arguments.
        //
        //   context:
        //     Object to which the message applies.
        //[Conditional("UNITY_ASSERTIONS")]
        public static void AssertFormat(bool condition, Object context, string format, params object[] args) { }
        //
        // Summary:
        //     Pauses the editor.
        //[FreeFunction("PauseEditor")]
        public static void Break() { }
        //
        // Summary:
        //     Clears errors from the developer console.
        public static void ClearDeveloperConsole() { }
        public static void DebugBreak() { }
        //
        // Summary:
        //     Draws a line between specified start and end points.
        //
        // Parameters:
        //   start:
        //     Point in world space where the line should start.
        //
        //   end:
        //     Point in world space where the line should end.
        //
        //   color:
        //     Color of the line.
        //
        //   duration:
        //     How long the line should be visible for.
        //
        //   depthTest:
        //     Should the line be obscured by objects closer to the camera?
        //[ExcludeFromDocs]
        public static void DrawLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, float duration) { }
        //
        // Summary:
        //     Draws a line between specified start and end points.
        //
        // Parameters:
        //   start:
        //     Point in world space where the line should start.
        //
        //   end:
        //     Point in world space where the line should end.
        //
        //   color:
        //     Color of the line.
        //
        //   duration:
        //     How long the line should be visible for.
        //
        //   depthTest:
        //     Should the line be obscured by objects closer to the camera?
        //[ExcludeFromDocs]
        public static void DrawLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color) { }
        //
        // Summary:
        //     Draws a line between specified start and end points.
        //
        // Parameters:
        //   start:
        //     Point in world space where the line should start.
        //
        //   end:
        //     Point in world space where the line should end.
        //
        //   color:
        //     Color of the line.
        //
        //   duration:
        //     How long the line should be visible for.
        //
        //   depthTest:
        //     Should the line be obscured by objects closer to the camera?
        //[FreeFunction("DebugDrawLine")]
        public static void DrawLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, float duration, bool depthTest) { }
        //
        // Summary:
        //     Draws a line between specified start and end points.
        //
        // Parameters:
        //   start:
        //     Point in world space where the line should start.
        //
        //   end:
        //     Point in world space where the line should end.
        //
        //   color:
        //     Color of the line.
        //
        //   duration:
        //     How long the line should be visible for.
        //
        //   depthTest:
        //     Should the line be obscured by objects closer to the camera?
        //[ExcludeFromDocs]
        public static void DrawLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end) { }
        //
        // Summary:
        //     Draws a line from start to start + dir in world coordinates.
        //
        // Parameters:
        //   start:
        //     Point in world space where the ray should start.
        //
        //   dir:
        //     Direction and length of the ray.
        //
        //   color:
        //     Color of the drawn line.
        //
        //   duration:
        //     How long the line will be visible for (in seconds).
        //
        //   depthTest:
        //     Should the line be obscured by other objects closer to the camera?
        //[ExcludeFromDocs]
        public static void DrawRay(UnityEngine.Vector3 start, UnityEngine.Vector3 dir, UnityEngine.Color color, float duration) { }
        //
        // Summary:
        //     Draws a line from start to start + dir in world coordinates.
        //
        // Parameters:
        //   start:
        //     Point in world space where the ray should start.
        //
        //   dir:
        //     Direction and length of the ray.
        //
        //   color:
        //     Color of the drawn line.
        //
        //   duration:
        //     How long the line will be visible for (in seconds).
        //
        //   depthTest:
        //     Should the line be obscured by other objects closer to the camera?
        public static void DrawRay(UnityEngine.Vector3 start, UnityEngine.Vector3 dir, UnityEngine.Color color, float duration, bool depthTest) { }
        //
        // Summary:
        //     Draws a line from start to start + dir in world coordinates.
        //
        // Parameters:
        //   start:
        //     Point in world space where the ray should start.
        //
        //   dir:
        //     Direction and length of the ray.
        //
        //   color:
        //     Color of the drawn line.
        //
        //   duration:
        //     How long the line will be visible for (in seconds).
        //
        //   depthTest:
        //     Should the line be obscured by other objects closer to the camera?
        //[ExcludeFromDocs]
        public static void DrawRay(UnityEngine.Vector3 start, UnityEngine.Vector3 dir) { }
        //
        // Summary:
        //     Draws a line from start to start + dir in world coordinates.
        //
        // Parameters:
        //   start:
        //     Point in world space where the ray should start.
        //
        //   dir:
        //     Direction and length of the ray.
        //
        //   color:
        //     Color of the drawn line.
        //
        //   duration:
        //     How long the line will be visible for (in seconds).
        //
        //   depthTest:
        //     Should the line be obscured by other objects closer to the camera?
        //[ExcludeFromDocs]
        public static void DrawRay(UnityEngine.Vector3 start, UnityEngine.Vector3 dir, UnityEngine.Color color) { }
        //
        // Summary:
        //     Log a message to the Unity Console.
        //
        // Parameters:
        //   message:
        //     String or object to be converted to string representation for display.
        //
        //   context:
        //     Object to which the message applies.
        public static void Log(object message, Object context) { }
        //
        // Summary:
        //     Log a message to the Unity Console.
        //
        // Parameters:
        //   message:
        //     String or object to be converted to string representation for display.
        //
        //   context:
        //     Object to which the message applies.
        public static void Log(object message) { }
        //
        // Summary:
        //     A variant of Debug.Log that logs an assertion message to the console.
        //
        // Parameters:
        //   message:
        //     String or object to be converted to string representation for display.
        //
        //   context:
        //     Object to which the message applies.
        //[Conditional("UNITY_ASSERTIONS")]
        public static void LogAssertion(object message, Object context) { }
        //
        // Summary:
        //     A variant of Debug.Log that logs an assertion message to the console.
        //
        // Parameters:
        //   message:
        //     String or object to be converted to string representation for display.
        //
        //   context:
        //     Object to which the message applies.
        //[Conditional("UNITY_ASSERTIONS")]
        public static void LogAssertion(object message) { }
        //
        // Summary:
        //     Logs a formatted assertion message to the Unity console.
        //
        // Parameters:
        //   format:
        //     A composite format string.
        //
        //   args:
        //     Format arguments.
        //
        //   context:
        //     Object to which the message applies.
        //[Conditional("UNITY_ASSERTIONS")]
        public static void LogAssertionFormat(Object context, string format, params object[] args) { }
        //
        // Summary:
        //     Logs a formatted assertion message to the Unity console.
        //
        // Parameters:
        //   format:
        //     A composite format string.
        //
        //   args:
        //     Format arguments.
        //
        //   context:
        //     Object to which the message applies.
        //[Conditional("UNITY_ASSERTIONS")]
        public static void LogAssertionFormat(string format, params object[] args) { }
        //
        // Summary:
        //     A variant of Debug.Log that logs an error message to the console.
        //
        // Parameters:
        //   message:
        //     String or object to be converted to string representation for display.
        //
        //   context:
        //     Object to which the message applies.
        public static void LogError(object message, Object context) { }
        //
        // Summary:
        //     A variant of Debug.Log that logs an error message to the console.
        //
        // Parameters:
        //   message:
        //     String or object to be converted to string representation for display.
        //
        //   context:
        //     Object to which the message applies.
        public static void LogError(object message) { }
        //
        // Summary:
        //     Logs a formatted error message to the Unity console.
        //
        // Parameters:
        //   format:
        //     A composite format string.
        //
        //   args:
        //     Format arguments.
        //
        //   context:
        //     Object to which the message applies.
        public static void LogErrorFormat(string format, params object[] args) { }
        //
        // Summary:
        //     Logs a formatted error message to the Unity console.
        //
        // Parameters:
        //   format:
        //     A composite format string.
        //
        //   args:
        //     Format arguments.
        //
        //   context:
        //     Object to which the message applies.
        public static void LogErrorFormat(Object context, string format, params object[] args) { }
        //
        // Summary:
        //     A variant of Debug.Log that logs an error message to the console.
        //
        // Parameters:
        //   context:
        //     Object to which the message applies.
        //
        //   exception:
        //     Runtime Exception.
        public static void LogException(Exception exception, Object context) { }
        //
        // Summary:
        //     A variant of Debug.Log that logs an error message to the console.
        //
        // Parameters:
        //   context:
        //     Object to which the message applies.
        //
        //   exception:
        //     Runtime Exception.
        public static void LogException(Exception exception) { }
        //
        // Summary:
        //     Logs a formatted message to the Unity Console.
        //
        // Parameters:
        //   format:
        //     A composite format string.
        //
        //   args:
        //     Format arguments.
        //
        //   context:
        //     Object to which the message applies.
        public static void LogFormat(Object context, string format, params object[] args) { }
        //
        // Summary:
        //     Logs a formatted message to the Unity Console.
        //
        // Parameters:
        //   format:
        //     A composite format string.
        //
        //   args:
        //     Format arguments.
        //
        //   context:
        //     Object to which the message applies.
        public static void LogFormat(string format, params object[] args) { }
        //
        // Summary:
        //     A variant of Debug.Log that logs a warning message to the console.
        //
        // Parameters:
        //   message:
        //     String or object to be converted to string representation for display.
        //
        //   context:
        //     Object to which the message applies.
        public static void LogWarning(object message) { }
        //
        // Summary:
        //     A variant of Debug.Log that logs a warning message to the console.
        //
        // Parameters:
        //   message:
        //     String or object to be converted to string representation for display.
        //
        //   context:
        //     Object to which the message applies.
        public static void LogWarning(object message, Object context) { }
        //
        // Summary:
        //     Logs a formatted warning message to the Unity Console.
        //
        // Parameters:
        //   format:
        //     A composite format string.
        //
        //   args:
        //     Format arguments.
        //
        //   context:
        //     Object to which the message applies.
        public static void LogWarningFormat(string format, params object[] args) { }
        //
        // Summary:
        //     Logs a formatted warning message to the Unity Console.
        //
        // Parameters:
        //   format:
        //     A composite format string.
        //
        //   args:
        //     Format arguments.
        //
        //   context:
        //     Object to which the message applies.
        public static void LogWarningFormat(Object context, string format, params object[] args) { }
    }
}