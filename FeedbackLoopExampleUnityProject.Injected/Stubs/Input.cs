using System;

/// <summary>
/// This file is provided so that unity engine classes can be swapped out
/// during running in a reloadable context, enabling runninf of game code
/// outside of the unity engine. The classes are generated by using the
/// 'Go to Definition' in VS, and copying out the definition into this file.
/// All methods and getters and then set to return <see cref="NotImplementedException"/>,
/// and only methods used by the scenario are made to work (such as Input,
/// and Scene Traversal mechanisms)
/// </summary>
namespace FL
{

    /// <summary>
    /// Replacement Class for <see cref="UnityEngine.Input" />
    /// </summary>
    public partial class Input
    {
        //
        // Summary:
        //     Controls enabling and disabling of IME input composition.
        public static UnityEngine.IMECompositionMode imeCompositionMode { get; set; }
        //
        // Summary:
        //     The current IME composition string being typed by the user.
        public static string compositionString => throw new NotImplementedException();
        //
        // Summary:
        //     Does the user have an IME keyboard input source selected?
        public static bool imeIsSelected => throw new NotImplementedException();
        //
        // Summary:
        //     The current text input position used by IMEs to open windows.
        public static UnityEngine.Vector2 compositionCursorPos { get; set; }
        //
        // Summary:
        //     Indicates if a mouse device is detected.
        public static bool mousePresent => throw new NotImplementedException();
        //
        // Summary:
        //     Number of touches. Guaranteed not to change throughout the frame. (Read Only)
        public static int touchCount => throw new NotImplementedException();
        //
        // Summary:
        //     Bool value which let's users check if touch pressure is supported.
        public static bool touchPressureSupported => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true when Stylus Touch is supported by a device or platform.
        public static bool stylusTouchSupported => throw new NotImplementedException();
        //
        // Summary:
        //     The current mouse scroll delta. (Read Only)
        public static UnityEngine.Vector2 mouseScrollDelta => throw new NotImplementedException();
        //
        // Summary:
        //     Returns whether the device on which application is currently running supports
        //     touch input.
        public static bool touchSupported => throw new NotImplementedException();
        //
        // Summary:
        //     Device physical orientation as reported by OS. (Read Only)
        public static UnityEngine.DeviceOrientation deviceOrientation => throw new NotImplementedException();
        //
        // Summary:
        //     Last measured linear acceleration of a device in three-dimensional space. (Read
        //     Only)
        public static UnityEngine.Vector3 acceleration => throw new NotImplementedException();
        //
        // Summary:
        //     This property controls if input sensors should be compensated for screen orientation.
        public static bool compensateSensors { get; set; }
        //
        // Summary:
        //     Number of acceleration measurements which occurred during last frame.
        public static int accelerationEventCount => throw new NotImplementedException();
        //
        // Summary:
        //     Should Back button quit the application? Only usable on Android, Windows Phone
        //     or Windows Tablets.
        public static bool backButtonLeavesApp { get; set; }
        //
        // Summary:
        //     Property for accessing device location (handheld devices only). (Read Only)
        public static UnityEngine.LocationService location => throw new NotImplementedException();
        //
        // Summary:
        //     Property for accessing compass (handheld devices only). (Read Only)
        public static UnityEngine.Compass compass => throw new NotImplementedException();
        //
        // Summary:
        //     Returns default gyroscope.
        public static UnityEngine.Gyroscope gyro => throw new NotImplementedException();
        //
        // Summary:
        //     Property indicating whether the system handles multiple touches.
        public static bool multiTouchEnabled { get; set; }
        //
        // Summary:
        //     The current mouse position in pixel coordinates. (Read Only)
        public static UnityEngine.Vector3 mousePosition => throw new NotImplementedException();
        //
        // Summary:
        //     Returns the keyboard input entered this frame. (Read Only)
        public static string inputString => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true the first frame the user hits any key or mouse button. (Read Only)
        public static bool anyKeyDown => throw new NotImplementedException();
        //
        // Summary:
        //     Returns list of objects representing status of all touches during last frame.
        //     (Read Only) (Allocates temporary variables).
        public static UnityEngine.Touch[] touches => throw new NotImplementedException();
        //
        // Summary:
        //     Returns list of acceleration measurements which occurred during the last frame.
        //     (Read Only) (Allocates temporary variables).
        public static UnityEngine.AccelerationEvent[] accelerationEvents => throw new NotImplementedException();
        //
        // Summary:
        //     Is any key or mouse button currently held down? (Read Only)
        public static bool anyKey => throw new NotImplementedException();
        //
        // Summary:
        //     Enables/Disables mouse simulation with touches. By default this option is enabled.
        public static bool simulateMouseWithTouches { get; set; }

        //
        // Summary:
        //     Returns specific acceleration measurement which occurred during last frame. (Does
        //     not allocate temporary variables).
        //
        // Parameters:
        //   index:
        //[NativeThrows]
        public static UnityEngine.AccelerationEvent GetAccelerationEvent(int index) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns the value of the virtual axis identified by axisName.
        //
        // Parameters:
        //   axisName:
        //[NativeThrows]
        public static float GetAxis(string axisName) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns the value of the virtual axis identified by axisName with no smoothing
        //     filtering applied.
        //
        // Parameters:
        //   axisName:
        //[NativeThrows]
        public static float GetAxisRaw(string axisName) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true while the virtual button identified by buttonName is held down.
        //
        // Parameters:
        //   buttonName:
        //     The name of the button such as Jump.
        //
        // Returns:
        //     True when an axis has been pressed and not released.
        //[NativeThrows]
        public static bool GetButton(string buttonName) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true during the frame the user pressed down the virtual button identified
        //     by buttonName.
        //
        // Parameters:
        //   buttonName:
        //[NativeThrows]
        public static bool GetButtonDown(string buttonName) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true the first frame the user releases the virtual button identified
        //     by buttonName.
        //
        // Parameters:
        //   buttonName:
        //[NativeThrows]
        public static bool GetButtonUp(string buttonName) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns an array of strings describing the connected joysticks.
        public static string[] GetJoystickNames() => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true while the user holds down the key identified by name.
        //
        // Parameters:
        //   name:
        public static bool GetKey(string name) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true while the user holds down the key identified by the key KeyCode
        //     enum parameter.
        //
        // Parameters:
        //   key:
        public static bool GetKey(UnityEngine.KeyCode key) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true during the frame the user starts pressing down the key identified
        //     by name.
        //
        // Parameters:
        //   name:
        public static bool GetKeyDown(string name) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true during the frame the user starts pressing down the key identified
        //     by the key KeyCode enum parameter.
        //
        // Parameters:
        //   key:
        public static bool GetKeyDown(UnityEngine.KeyCode key) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true during the frame the user releases the key identified by the key
        //     KeyCode enum parameter.
        //
        // Parameters:
        //   key:
        public static bool GetKeyUp(UnityEngine.KeyCode key) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true during the frame the user releases the key identified by name.
        //
        // Parameters:
        //   name:
        public static bool GetKeyUp(string name) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns whether the given mouse button is held down.
        //
        // Parameters:
        //   button:
        //[NativeThrows]
        public static bool GetMouseButton(int button) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true during the frame the user pressed the given mouse button.
        //
        // Parameters:
        //   button:
        //[NativeThrows]
        public static bool GetMouseButtonDown(int button) => throw new NotImplementedException();
        //
        // Summary:
        //     Returns true during the frame the user releases the given mouse button.
        //
        // Parameters:
        //   button:
        //[NativeThrows]
        public static bool GetMouseButtonUp(int button) => throw new NotImplementedException();
        //
        // Summary:
        //     Call FL.Input.GetTouch to obtain a Touch struct.
        //
        // Parameters:
        //   index:
        //     The touch input on the device screen.
        //
        // Returns:
        //     Touch details in the struct.
        //[NativeThrows]
        public static UnityEngine.Touch GetTouch(int index) => throw new NotImplementedException();
        //
        // Summary:
        //     Determine whether a particular joystick model has been preconfigured by Unity.
        //     (Linux-only).
        //
        // Parameters:
        //   joystickName:
        //     The name of the joystick to check (returned by FL.Input.GetJoystickNames).
        //
        // Returns:
        //     True if the joystick layout has been preconfigured{ }  false otherwise.
        public static bool IsJoystickPreconfigured(string joystickName) => throw new NotImplementedException();
        //
        // Summary:
        //     Resets all input. After ResetInputAxes all axes return to 0 and all buttons return
        //     to 0 for one frame.
        //[FreeFunction("ResetInput")]
        public static void ResetInputAxes() => throw new NotImplementedException();
    }
}