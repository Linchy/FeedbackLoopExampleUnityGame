using System;
using System.Collections;

/// <summary>
/// This file is provided so that unity engine classes can be swapped out
/// during running in a reloadable context, enabling runninf of game code
/// outside of the unity engine. The classes are generated by using the
/// 'Go to Definition' in VS, and copying out the definition into this file.
/// All methods and getters and then set to return <see cref="NotImplementedException"/>,
/// and only methods used by the scenario are made to work (such as Input,
/// and Scene Traversal mechanisms)
/// </summary>
namespace FL
{
    //
    // Summary:
    //     Position, rotation and scale of an object.
    //[UnityEngine.Bindings.NativeHeaderAttribute("Configuration/UnityConfigure.h")]
    //[UnityEngine.Bindings.NativeHeaderAttribute("Runtime/Transform/Transform.h")]
    //[UnityEngine.Bindings.NativeHeaderAttribute("Runtime/Transform/ScriptBindings/TransformScriptBindings.h")]
    //[Scripting.RequiredByNativeCodeAttribute]
    public partial class Transform : Component, IEnumerable
    {
        //
        // Summary:
        //     Position of the transform relative to the parent transform.
        public UnityEngine.Vector3 localPosition { get; set; }
        //
        // Summary:
        //     The rotation as Euler angles in degrees.
        public UnityEngine.Vector3 eulerAngles { get; set; }
        //
        // Summary:
        //     The rotation as Euler angles in degrees relative to the parent transform's rotation.
        public UnityEngine.Vector3 localEulerAngles { get; set; }
        //
        // Summary:
        //     The red axis of the transform in world space.
        public UnityEngine.Vector3 right { get; set; }
        //
        // Summary:
        //     The green axis of the transform in world space.
        public UnityEngine.Vector3 up { get; set; }
        //
        // Summary:
        //     The blue axis of the transform in world space.
        public UnityEngine.Vector3 forward { get; set; }
        //
        // Summary:
        //     A quaternion that stores the rotation of the Transform in world space.
        public UnityEngine.Quaternion rotation { get; set; }
        //
        // Summary:
        //     The world space position of the Transform.
        public UnityEngine.Vector3 position { get; set; }
        //
        // Summary:
        //     The rotation of the transform relative to the transform rotation of the parent.
        public UnityEngine.Quaternion localRotation { get; set; }
        //
        // Summary:
        //     Matrix that transforms a point from world space into local space (Read Only).
        public UnityEngine.Matrix4x4 worldToLocalMatrix { get; }
        //
        // Summary:
        //     Matrix that transforms a point from local space into world space (Read Only).
        public UnityEngine.Matrix4x4 localToWorldMatrix { get; }
        //
        // Summary:
        //     Returns the topmost transform in the hierarchy.
        public Transform root { get; }
        //
        // Summary:
        //     The number of children the parent Transform has.
        public int childCount { get; }
        //
        // Summary:
        //     The global scale of the object (Read Only).
        public UnityEngine.Vector3 lossyScale { get; }
        //
        // Summary:
        //     Has the transform changed since the last time the flag was set to 'false'?
        //[UnityEngine.Bindings.NativePropertyAttribute("HasChangedDeprecated")]
        public bool hasChanged { get; set; }
        //
        // Summary:
        //     The scale of the transform relative to the parent.
        public UnityEngine.Vector3 localScale { get; set; }
        //
        // Summary:
        //     The transform capacity of the transform's hierarchy data structure.
        public int hierarchyCapacity { get; set; }
        //
        // Summary:
        //     The number of transforms in the transform's hierarchy data structure.
        public int hierarchyCount { get; }

        //
        // Summary:
        //     Unparents all children.
        //[UnityEngine.Bindings.FreeFunctionAttribute("DetachChildren", HasExplicitThis = true)]
        public void DetachChildren() => throw new NotImplementedException();
        //
        // Summary:
        //     Finds a child by n and returns it.
        //
        // Parameters:
        //   n:
        //     Name of child to be found.
        //
        // Returns:
        //     The returned child transform or null if no child is found.
        public Transform Find(string n) => throw new NotImplementedException();

        //
        // Summary:
        //     Returns a transform child by index.
        //
        // Parameters:
        //   index:
        //     Index of the child transform to return. Must be smaller than Transform.childCount.
        //
        // Returns:
        //     Transform child by index.
        //[UnityEngine.Bindings.FreeFunctionAttribute("GetChild", HasExplicitThis = true)]
        //[UnityEngine.Bindings.NativeThrowsAttribute]
        public Transform GetChild(int index) => throw new NotImplementedException();

        public IEnumerator GetEnumerator() => throw new NotImplementedException();
        //
        // Summary:
        //     Gets the sibling index.
        public int GetSiblingIndex() => throw new NotImplementedException();
        //
        // Summary:
        //     Transforms a direction from world space to local space. The opposite of Transform.TransformDirection.
        //
        // Parameters:
        //   direction:
        public UnityEngine.Vector3 InverseTransformDirection(UnityEngine.Vector3 direction) => throw new NotImplementedException();
        //
        // Summary:
        //     Transforms the direction x, y, z from world space to local space. The opposite
        //     of Transform.TransformDirection.
        //
        // Parameters:
        //   x:
        //
        //   y:
        //
        //   z:
        public UnityEngine.Vector3 InverseTransformDirection(float x, float y, float z) => throw new NotImplementedException();
        //
        // Summary:
        //     Transforms the position x, y, z from world space to local space. The opposite
        //     of Transform.TransformPoint.
        //
        // Parameters:
        //   x:
        //
        //   y:
        //
        //   z:
        public UnityEngine.Vector3 InverseTransformPoint(float x, float y, float z) => throw new NotImplementedException();
        //
        // Summary:
        //     Transforms position from world space to local space.
        //
        // Parameters:
        //   position:
        public UnityEngine.Vector3 InverseTransformPoint(UnityEngine.Vector3 position) => throw new NotImplementedException();
        //
        // Summary:
        //     Transforms a vector from world space to local space. The opposite of Transform.TransformVector.
        //
        // Parameters:
        //   vector:
        public UnityEngine.Vector3 InverseTransformVector(UnityEngine.Vector3 vector) => throw new NotImplementedException();
        //
        // Summary:
        //     Transforms the vector x, y, z from world space to local space. The opposite of
        //     Transform.TransformVector.
        //
        // Parameters:
        //   x:
        //
        //   y:
        //
        //   z:
        public UnityEngine.Vector3 InverseTransformVector(float x, float y, float z) => throw new NotImplementedException();
        //
        // Summary:
        //     Is this transform a child of parent?
        //
        // Parameters:
        //   parent:
        //[UnityEngine.Bindings.FreeFunctionAttribute("Internal_IsChildOrSameTransform", HasExplicitThis = true)]
        public bool IsChildOf(Transform parent) => throw new NotImplementedException();
        //
        // Summary:
        //     Rotates the transform so the forward vector points at target's current position.
        //
        // Parameters:
        //   target:
        //     Object to point towards.
        //
        //   worldUp:
        //     Vector specifying the upward direction.
        public void LookAt(Transform target, UnityEngine.Vector3 worldUp) => throw new NotImplementedException();
        //
        // Summary:
        //     Rotates the transform so the forward vector points at worldPosition.
        //
        // Parameters:
        //   worldPosition:
        //     Point to look at.
        //
        //   worldUp:
        //     Vector specifying the upward direction.
        public void LookAt(UnityEngine.Vector3 worldPosition, UnityEngine.Vector3 worldUp) => throw new NotImplementedException();
        //
        // Summary:
        //     Rotates the transform so the forward vector points at worldPosition.
        //
        // Parameters:
        //   worldPosition:
        //     Point to look at.
        //
        //   worldUp:
        //     Vector specifying the upward direction.
        public void LookAt(UnityEngine.Vector3 worldPosition) => throw new NotImplementedException();
        //
        // Summary:
        //     Rotates the transform so the forward vector points at target's current position.
        //
        // Parameters:
        //   target:
        //     Object to point towards.
        //
        //   worldUp:
        //     Vector specifying the upward direction.
        public void LookAt(Transform target) => throw new NotImplementedException();
        public void Rotate(float xAngle, float yAngle, float zAngle) => throw new NotImplementedException();
        //
        // Summary:
        //     Applies a rotation of eulerAngles.z degrees around the z-axis, eulerAngles.x
        //     degrees around the x-axis, and eulerAngles.y degrees around the y-axis (in that
        //     order).
        //
        // Parameters:
        //   eulers:
        //     The rotation to apply.
        //
        //   relativeTo:
        //     Determines whether to rotate the GameObject either locally to the GameObject
        //     or relative to the Scene in world space.
        public void Rotate(UnityEngine.Vector3 eulers, UnityEngine.Space relativeTo) => throw new NotImplementedException();
        public void Rotate(UnityEngine.Vector3 eulers) => throw new NotImplementedException();
        //
        // Summary:
        //     Applies a rotation of zAngle degrees around the z axis, xAngle degrees around
        //     the x axis, and yAngle degrees around the y axis (in that order).
        //
        // Parameters:
        //   relativeTo:
        //     Determines whether to rotate the GameObject either locally to the GameObject
        //     or relative to the Scene in world space.
        //
        //   xAngle:
        //     Degrees to rotate the GameObject around the X axis.
        //
        //   yAngle:
        //     Degrees to rotate the GameObject around the Y axis.
        //
        //   zAngle:
        //     Degrees to rotate the GameObject around the Z axis.
        public void Rotate(float xAngle, float yAngle, float zAngle, UnityEngine.Space relativeTo) => throw new NotImplementedException();
        //
        // Summary:
        //     Rotates the object around the given axis by the number of degrees defined by
        //     the given angle.
        //
        // Parameters:
        //   angle:
        //     The degrees of rotation to apply.
        //
        //   axis:
        //     The axis to apply rotation to.
        //
        //   relativeTo:
        //     Determines whether to rotate the GameObject either locally to the GameObject
        //     or relative to the Scene in world space.
        public void Rotate(UnityEngine.Vector3 axis, float angle, UnityEngine.Space relativeTo) => throw new NotImplementedException();
        public void Rotate(UnityEngine.Vector3 axis, float angle) => throw new NotImplementedException();
        //
        // Summary:
        //     Rotates the transform about axis passing through point in world coordinates by
        //     angle degrees.
        //
        // Parameters:
        //   point:
        //
        //   axis:
        //
        //   angle:
        public void RotateAround(UnityEngine.Vector3 point, UnityEngine.Vector3 axis, float angle) => throw new NotImplementedException();
        //
        // Parameters:
        //   axis:
        //
        //   angle:
        [Obsolete("warning use Transform.Rotate instead.")]
        public void RotateAround(UnityEngine.Vector3 axis, float angle) => throw new NotImplementedException();
        [Obsolete("warning use Transform.Rotate instead.")]
        public void RotateAroundLocal(UnityEngine.Vector3 axis, float angle) => throw new NotImplementedException();
        //
        // Summary:
        //     Move the transform to the start of the local transform list.
        public void SetAsFirstSibling() => throw new NotImplementedException();
        //
        // Summary:
        //     Move the transform to the end of the local transform list.
        public void SetAsLastSibling() => throw new NotImplementedException();
        //
        // Summary:
        //     Set the parent of the transform.
        //
        // Parameters:
        //   parent:
        //     The parent Transform to use.
        //
        //   worldPositionStays:
        //     If true, the parent-relative position, scale and rotation are modified such that
        //     the object keeps the same world space position, rotation and scale as before.
        //
        //   p:
        public void SetParent(Transform p) => throw new NotImplementedException();
        //
        // Summary:
        //     Set the parent of the transform.
        //
        // Parameters:
        //   parent:
        //     The parent Transform to use.
        //
        //   worldPositionStays:
        //     If true, the parent-relative position, scale and rotation are modified such that
        //     the object keeps the same world space position, rotation and scale as before.
        //
        //   p:
        //[UnityEngine.Bindings.FreeFunctionAttribute("SetParent", HasExplicitThis = true)]
        public void SetParent(Transform parent, bool worldPositionStays) => throw new NotImplementedException();
        //
        // Summary:
        //     Sets the world space position and rotation of the Transform component.
        //
        // Parameters:
        //   position:
        //
        //   rotation:
        public void SetPositionAndRotation(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation) => throw new NotImplementedException();
        //
        // Summary:
        //     Sets the sibling index.
        //
        // Parameters:
        //   index:
        //     Index to set.
        public void SetSiblingIndex(int index) => throw new NotImplementedException();
        //
        // Summary:
        //     Transforms direction x, y, z from local space to world space.
        //
        // Parameters:
        //   x:
        //
        //   y:
        //
        //   z:
        public UnityEngine.Vector3 TransformDirection(float x, float y, float z) => throw new NotImplementedException();
        //
        // Summary:
        //     Transforms direction from local space to world space.
        //
        // Parameters:
        //   direction:
        public UnityEngine.Vector3 TransformDirection(UnityEngine.Vector3 direction) => throw new NotImplementedException();
        //
        // Summary:
        //     Transforms the position x, y, z from local space to world space.
        //
        // Parameters:
        //   x:
        //
        //   y:
        //
        //   z:
        public UnityEngine.Vector3 TransformPoint(float x, float y, float z) => throw new NotImplementedException();
        //
        // Summary:
        //     Transforms position from local space to world space.
        //
        // Parameters:
        //   position:
        public UnityEngine.Vector3 TransformPoint(UnityEngine.Vector3 position) => throw new NotImplementedException();
        //
        // Summary:
        //     Transforms vector x, y, z from local space to world space.
        //
        // Parameters:
        //   x:
        //
        //   y:
        //
        //   z:
        public UnityEngine.Vector3 TransformVector(float x, float y, float z) => throw new NotImplementedException();
        //
        // Summary:
        //     Transforms vector from local space to world space.
        //
        // Parameters:
        //   vector:
        public UnityEngine.Vector3 TransformVector(UnityEngine.Vector3 vector) => throw new NotImplementedException();
        //
        // Summary:
        //     Moves the transform by x along the x axis, y along the y axis, and z along the
        //     z axis.
        //
        // Parameters:
        //   x:
        //
        //   y:
        //
        //   z:
        //
        //   relativeTo:
        public void Translate(float x, float y, float z) => throw new NotImplementedException();
        //
        // Summary:
        //     Moves the transform by x along the x axis, y along the y axis, and z along the
        //     z axis.
        //
        // Parameters:
        //   x:
        //
        //   y:
        //
        //   z:
        //
        //   relativeTo:
        public void Translate(float x, float y, float z, UnityEngine.Space relativeTo) => throw new NotImplementedException();
        //
        // Summary:
        //     Moves the transform in the direction and distance of translation.
        //
        // Parameters:
        //   translation:
        //
        //   relativeTo:
        public void Translate(UnityEngine.Vector3 translation) => throw new NotImplementedException();
        //
        // Summary:
        //     Moves the transform in the direction and distance of translation.
        //
        // Parameters:
        //   translation:
        //
        //   relativeTo:
        public void Translate(UnityEngine.Vector3 translation, UnityEngine.Space relativeTo) => throw new NotImplementedException();
        //
        // Summary:
        //     Moves the transform by x along the x axis, y along the y axis, and z along the
        //     z axis.
        //
        // Parameters:
        //   x:
        //
        //   y:
        //
        //   z:
        //
        //   relativeTo:
        public void Translate(float x, float y, float z, Transform relativeTo) => throw new NotImplementedException();
        //
        // Summary:
        //     Moves the transform in the direction and distance of translation.
        //
        // Parameters:
        //   translation:
        //
        //   relativeTo:
        public void Translate(UnityEngine.Vector3 translation, Transform relativeTo) => throw new NotImplementedException();
    }
}