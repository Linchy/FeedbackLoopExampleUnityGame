using System;
using System.Collections.Generic;
using System.Linq;
/// <summary>
/// This file is provided so that unity engine classes can be swapped out
/// during running in a reloadable context, enabling runninf of game code
/// outside of the unity engine. The classes are generated by using the
/// 'Go to Definition' in VS, and copying out the definition into this file.
/// All methods and getters and then set to return <see cref="NotImplementedException"/>,
/// and only methods used by the scenario are made to work (such as Input,
/// and Scene Traversal mechanisms)
/// </summary>
namespace FL_UnityEngine
{
    public partial class GameObject
    {
        private readonly List<GameObject> _children;
        private readonly List<Component> _components;

        public GameObject gameObject => this;
        //
        // Summary:
        //     The Transform attached to this GameObject.
        public Transform transform { get; }

        public GameObject()
        {
            _children = new List<GameObject>();
            _components = new List<Component>();

            transform = AddComponent<Transform>();
        }

        public void _AddChild(GameObject child)
        {
            _children.Add(child);
        }

        public void _RemoveChild(GameObject child)
        {
            _children.Remove(child);
        }

        //
        // Summary:
        //     Adds a component class of type componentType to the game object.
        //
        public T AddComponent<T>() where T : Component
        {
            var component = Activator.CreateInstance<T>();
            _components.Add(component);
            component.gameObject = this;
            return component;
        }

        //[SecuritySafeCritical]
        public T GetComponent<T>() => _components.OfType<T>().FirstOrDefault();

        //
        // Summary:
        //     Calls the method named methodName on every MonoBehaviour in this game object.
        //
        // Parameters:
        //   methodName:
        //     The name of the method to call.
        //
        //   value:
        //     An optional parameter value to pass to the called method.
        //
        //   options:
        //     Should an error be raised if the method doesn't exist on the target object?
        //[ExcludeFromDocs]
        public void SendMessage(string methodName)
        {
            foreach (var component in _components)
            {
                if (component is MonoBehaviour monoBehaviour)
                {
                    monoBehaviour.Invoke(methodName, 0);
                }
            }
        }

        //
        // Summary:
        //     Calls the method named methodName on every MonoBehaviour in this game object
        //     or any of its children.
        //
        // Parameters:
        //   methodName:
        //
        //   parameter:
        //
        //   options:
        //[ExcludeFromDocs]
        public void BroadcastMessage(string methodName)
        {
            SendMessage(methodName);
            foreach (var child in _children)
            {
                child.BroadcastMessage(methodName);
            }
        }
    }
}