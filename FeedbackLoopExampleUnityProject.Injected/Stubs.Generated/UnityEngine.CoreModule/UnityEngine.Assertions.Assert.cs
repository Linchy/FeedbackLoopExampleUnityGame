using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace FL_UnityEngine.Assertions
{
	public unsafe partial class Assert {
		public static bool raiseExceptions;
		public static void AreApproximatelyEqual(float expected, float actual) => throw new NotImplementedException();
		public static void AreApproximatelyEqual(float expected, float actual, string message) => throw new NotImplementedException();
		public static void AreApproximatelyEqual(float expected, float actual, float tolerance) => throw new NotImplementedException();
		public static void AreApproximatelyEqual(float expected, float actual, float tolerance, string message) => throw new NotImplementedException();
		public static void AreEqual<T>(T expected, T actual) => throw new NotImplementedException();
		public static void AreEqual<T>(T expected, T actual, string message) => throw new NotImplementedException();
		public static void AreEqual<T>(T expected, T actual, string message, System.Collections.Generic.IEqualityComparer<T> comparer) => throw new NotImplementedException();
		public static void AreEqual(FL_UnityEngine.Object expected, FL_UnityEngine.Object actual, string message) => throw new NotImplementedException();
		public static void AreEqual(System.SByte expected, System.SByte actual) => throw new NotImplementedException();
		public static void AreEqual(System.SByte expected, System.SByte actual, string message) => throw new NotImplementedException();
		public static void AreEqual(byte expected, byte actual) => throw new NotImplementedException();
		public static void AreEqual(byte expected, byte actual, string message) => throw new NotImplementedException();
		public static void AreEqual(System.Char expected, System.Char actual) => throw new NotImplementedException();
		public static void AreEqual(System.Char expected, System.Char actual, string message) => throw new NotImplementedException();
		public static void AreEqual(short expected, short actual) => throw new NotImplementedException();
		public static void AreEqual(short expected, short actual, string message) => throw new NotImplementedException();
		public static void AreEqual(System.UInt16 expected, System.UInt16 actual) => throw new NotImplementedException();
		public static void AreEqual(System.UInt16 expected, System.UInt16 actual, string message) => throw new NotImplementedException();
		public static void AreEqual(int expected, int actual) => throw new NotImplementedException();
		public static void AreEqual(int expected, int actual, string message) => throw new NotImplementedException();
		public static void AreEqual(System.UInt32 expected, System.UInt32 actual) => throw new NotImplementedException();
		public static void AreEqual(System.UInt32 expected, System.UInt32 actual, string message) => throw new NotImplementedException();
		public static void AreEqual(long expected, long actual) => throw new NotImplementedException();
		public static void AreEqual(long expected, long actual, string message) => throw new NotImplementedException();
		public static void AreEqual(System.UInt64 expected, System.UInt64 actual) => throw new NotImplementedException();
		public static void AreEqual(System.UInt64 expected, System.UInt64 actual, string message) => throw new NotImplementedException();
		public static void AreNotApproximatelyEqual(float expected, float actual) => throw new NotImplementedException();
		public static void AreNotApproximatelyEqual(float expected, float actual, string message) => throw new NotImplementedException();
		public static void AreNotApproximatelyEqual(float expected, float actual, float tolerance) => throw new NotImplementedException();
		public static void AreNotApproximatelyEqual(float expected, float actual, float tolerance, string message) => throw new NotImplementedException();
		public static void AreNotEqual<T>(T expected, T actual) => throw new NotImplementedException();
		public static void AreNotEqual<T>(T expected, T actual, string message) => throw new NotImplementedException();
		public static void AreNotEqual<T>(T expected, T actual, string message, System.Collections.Generic.IEqualityComparer<T> comparer) => throw new NotImplementedException();
		public static void AreNotEqual(FL_UnityEngine.Object expected, FL_UnityEngine.Object actual, string message) => throw new NotImplementedException();
		public static void AreNotEqual(System.SByte expected, System.SByte actual) => throw new NotImplementedException();
		public static void AreNotEqual(System.SByte expected, System.SByte actual, string message) => throw new NotImplementedException();
		public static void AreNotEqual(byte expected, byte actual) => throw new NotImplementedException();
		public static void AreNotEqual(byte expected, byte actual, string message) => throw new NotImplementedException();
		public static void AreNotEqual(System.Char expected, System.Char actual) => throw new NotImplementedException();
		public static void AreNotEqual(System.Char expected, System.Char actual, string message) => throw new NotImplementedException();
		public static void AreNotEqual(short expected, short actual) => throw new NotImplementedException();
		public static void AreNotEqual(short expected, short actual, string message) => throw new NotImplementedException();
		public static void AreNotEqual(System.UInt16 expected, System.UInt16 actual) => throw new NotImplementedException();
		public static void AreNotEqual(System.UInt16 expected, System.UInt16 actual, string message) => throw new NotImplementedException();
		public static void AreNotEqual(int expected, int actual) => throw new NotImplementedException();
		public static void AreNotEqual(int expected, int actual, string message) => throw new NotImplementedException();
		public static void AreNotEqual(System.UInt32 expected, System.UInt32 actual) => throw new NotImplementedException();
		public static void AreNotEqual(System.UInt32 expected, System.UInt32 actual, string message) => throw new NotImplementedException();
		public static void AreNotEqual(long expected, long actual) => throw new NotImplementedException();
		public static void AreNotEqual(long expected, long actual, string message) => throw new NotImplementedException();
		public static void AreNotEqual(System.UInt64 expected, System.UInt64 actual) => throw new NotImplementedException();
		public static void AreNotEqual(System.UInt64 expected, System.UInt64 actual, string message) => throw new NotImplementedException();
		public static void IsFalse(bool condition) => throw new NotImplementedException();
		public static void IsFalse(bool condition, string message) => throw new NotImplementedException();
		public static void IsNotNull<T>(T value) => throw new NotImplementedException();
		public static void IsNotNull<T>(T value, string message) => throw new NotImplementedException();
		public static void IsNotNull(FL_UnityEngine.Object value, string message) => throw new NotImplementedException();
		public static void IsNull<T>(T value) => throw new NotImplementedException();
		public static void IsNull<T>(T value, string message) => throw new NotImplementedException();
		public static void IsNull(FL_UnityEngine.Object value, string message) => throw new NotImplementedException();
		public static void IsTrue(bool condition) => throw new NotImplementedException();
		public static void IsTrue(bool condition, string message) => throw new NotImplementedException();
	}
}
