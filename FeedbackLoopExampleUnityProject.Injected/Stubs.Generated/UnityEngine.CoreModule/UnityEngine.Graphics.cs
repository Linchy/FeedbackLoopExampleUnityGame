using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace FL_UnityEngine
{
	public unsafe partial class Graphics {
		//public Graphics() { }
		public static void Blit(FL_UnityEngine.Texture source, FL_UnityEngine.RenderTexture dest) => throw new NotImplementedException();
		public static void Blit(FL_UnityEngine.Texture source, FL_UnityEngine.RenderTexture dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset) => throw new NotImplementedException();
		public static void Blit(FL_UnityEngine.Texture source, FL_UnityEngine.RenderTexture dest, FL_UnityEngine.Material mat, int pass) => throw new NotImplementedException();
		public static void Blit(FL_UnityEngine.Texture source, FL_UnityEngine.RenderTexture dest, FL_UnityEngine.Material mat) => throw new NotImplementedException();
		public static void Blit(FL_UnityEngine.Texture source, FL_UnityEngine.Material mat, int pass) => throw new NotImplementedException();
		public static void Blit(FL_UnityEngine.Texture source, FL_UnityEngine.Material mat) => throw new NotImplementedException();
		public static void BlitMultiTap(FL_UnityEngine.Texture source, FL_UnityEngine.RenderTexture dest, FL_UnityEngine.Material mat, UnityEngine.Vector2[] offsets) => throw new NotImplementedException();
		public static void ClearRandomWriteTargets() => throw new NotImplementedException();
		public static bool ConvertTexture(FL_UnityEngine.Texture src, FL_UnityEngine.Texture dst) => throw new NotImplementedException();
		public static bool ConvertTexture(FL_UnityEngine.Texture src, int srcElement, FL_UnityEngine.Texture dst, int dstElement) => throw new NotImplementedException();
		public static void CopyTexture(FL_UnityEngine.Texture src, FL_UnityEngine.Texture dst) => throw new NotImplementedException();
		public static void CopyTexture(FL_UnityEngine.Texture src, int srcElement, FL_UnityEngine.Texture dst, int dstElement) => throw new NotImplementedException();
		public static void CopyTexture(FL_UnityEngine.Texture src, int srcElement, int srcMip, FL_UnityEngine.Texture dst, int dstElement, int dstMip) => throw new NotImplementedException();
		public static void CopyTexture(FL_UnityEngine.Texture src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, FL_UnityEngine.Texture dst, int dstElement, int dstMip, int dstX, int dstY) => throw new NotImplementedException();
		public static UnityEngine.Rendering.GPUFence CreateGPUFence(UnityEngine.Rendering.SynchronisationStage stage) => throw new NotImplementedException();
		public static UnityEngine.Rendering.GPUFence CreateGPUFence() => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, FL_UnityEngine.Material material, int layer) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, bool castShadows) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, bool castShadows, bool receiveShadows) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, FL_UnityEngine.Transform probeAnchor) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, bool castShadows) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, bool castShadows, bool receiveShadows) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, FL_UnityEngine.Transform probeAnchor) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, FL_UnityEngine.Transform probeAnchor, bool useLightProbes) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, FL_UnityEngine.Transform probeAnchor, UnityEngine.Rendering.LightProbeUsage lightProbeUsage) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, bool castShadows, bool receiveShadows, bool useLightProbes) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, FL_UnityEngine.Transform probeAnchor, bool useLightProbes) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, bool castShadows, bool receiveShadows, bool useLightProbes) => throw new NotImplementedException();
		public static void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int layer, FL_UnityEngine.Camera camera, int submeshIndex, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, FL_UnityEngine.Transform probeAnchor, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, FL_UnityEngine.LightProbeProxyVolume lightProbeProxyVolume) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, FL_UnityEngine.MaterialPropertyBlock properties) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, FL_UnityEngine.Camera camera) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, FL_UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, FL_UnityEngine.MaterialPropertyBlock properties) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, FL_UnityEngine.Camera camera) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, FL_UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, FL_UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, FL_UnityEngine.LightProbeProxyVolume lightProbeProxyVolume) => throw new NotImplementedException();
		public static void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, FL_UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, FL_UnityEngine.LightProbeProxyVolume lightProbeProxyVolume) => throw new NotImplementedException();
		public static void DrawMeshInstancedIndirect(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Bounds bounds, FL_UnityEngine.ComputeBuffer bufferWithArgs) => throw new NotImplementedException();
		public static void DrawMeshInstancedIndirect(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Bounds bounds, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset) => throw new NotImplementedException();
		public static void DrawMeshInstancedIndirect(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Bounds bounds, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, FL_UnityEngine.MaterialPropertyBlock properties) => throw new NotImplementedException();
		public static void DrawMeshInstancedIndirect(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Bounds bounds, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows) => throw new NotImplementedException();
		public static void DrawMeshInstancedIndirect(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Bounds bounds, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows) => throw new NotImplementedException();
		public static void DrawMeshInstancedIndirect(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Bounds bounds, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer) => throw new NotImplementedException();
		public static void DrawMeshInstancedIndirect(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Bounds bounds, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, FL_UnityEngine.Camera camera) => throw new NotImplementedException();
		public static void DrawMeshInstancedIndirect(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Bounds bounds, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, FL_UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage) => throw new NotImplementedException();
		public static void DrawMeshInstancedIndirect(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, UnityEngine.Bounds bounds, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, FL_UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, FL_UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, FL_UnityEngine.LightProbeProxyVolume lightProbeProxyVolume) => throw new NotImplementedException();
		public static void DrawMeshNow(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, int materialIndex) => throw new NotImplementedException();
		public static void DrawMeshNow(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, int materialIndex) => throw new NotImplementedException();
		public static void DrawMeshNow(FL_UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation) => throw new NotImplementedException();
		public static void DrawMeshNow(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix) => throw new NotImplementedException();
		public static void DrawProcedural(UnityEngine.MeshTopology topology, int vertexCount, int instanceCount) => throw new NotImplementedException();
		public static void DrawProcedural(UnityEngine.MeshTopology topology, int vertexCount) => throw new NotImplementedException();
		public static void DrawProceduralIndirect(UnityEngine.MeshTopology topology, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset) => throw new NotImplementedException();
		public static void DrawProceduralIndirect(UnityEngine.MeshTopology topology, FL_UnityEngine.ComputeBuffer bufferWithArgs) => throw new NotImplementedException();
		public static void DrawTexture(UnityEngine.Rect screenRect, FL_UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Color color, FL_UnityEngine.Material mat) => throw new NotImplementedException();
		public static void DrawTexture(UnityEngine.Rect screenRect, FL_UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Color color) => throw new NotImplementedException();
		public static void DrawTexture(UnityEngine.Rect screenRect, FL_UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, FL_UnityEngine.Material mat) => throw new NotImplementedException();
		public static void DrawTexture(UnityEngine.Rect screenRect, FL_UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder) => throw new NotImplementedException();
		public static void DrawTexture(UnityEngine.Rect screenRect, FL_UnityEngine.Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder, FL_UnityEngine.Material mat) => throw new NotImplementedException();
		public static void DrawTexture(UnityEngine.Rect screenRect, FL_UnityEngine.Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder) => throw new NotImplementedException();
		public static void DrawTexture(UnityEngine.Rect screenRect, FL_UnityEngine.Texture texture, FL_UnityEngine.Material mat) => throw new NotImplementedException();
		public static void DrawTexture(UnityEngine.Rect screenRect, FL_UnityEngine.Texture texture) => throw new NotImplementedException();
		public static void DrawTexture(UnityEngine.Rect screenRect, FL_UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Color color, FL_UnityEngine.Material mat, int pass) => throw new NotImplementedException();
		public static void DrawTexture(UnityEngine.Rect screenRect, FL_UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, FL_UnityEngine.Material mat, int pass) => throw new NotImplementedException();
		public static void DrawTexture(UnityEngine.Rect screenRect, FL_UnityEngine.Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder, FL_UnityEngine.Material mat, int pass) => throw new NotImplementedException();
		public static void DrawTexture(UnityEngine.Rect screenRect, FL_UnityEngine.Texture texture, FL_UnityEngine.Material mat, int pass) => throw new NotImplementedException();
		public static void ExecuteCommandBuffer(FL_UnityEngine.Rendering.CommandBuffer buffer) => throw new NotImplementedException();
		public static void ExecuteCommandBufferAsync(FL_UnityEngine.Rendering.CommandBuffer buffer, UnityEngine.Rendering.ComputeQueueType queueType) => throw new NotImplementedException();
		public static void SetRandomWriteTarget(int index, FL_UnityEngine.ComputeBuffer uav) => throw new NotImplementedException();
		public static void SetRandomWriteTarget(int index, FL_UnityEngine.RenderTexture uav) => throw new NotImplementedException();
		public static void SetRandomWriteTarget(int index, FL_UnityEngine.ComputeBuffer uav, bool preserveCounterValue) => throw new NotImplementedException();
		public static void SetRenderTarget(FL_UnityEngine.RenderTexture rt) => throw new NotImplementedException();
		public static void SetRenderTarget(FL_UnityEngine.RenderTexture rt, int mipLevel) => throw new NotImplementedException();
		public static void SetRenderTarget(FL_UnityEngine.RenderTexture rt, int mipLevel, UnityEngine.CubemapFace face) => throw new NotImplementedException();
		public static void SetRenderTarget(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer) => throw new NotImplementedException();
		public static void SetRenderTarget(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer, int mipLevel) => throw new NotImplementedException();
		public static void SetRenderTarget(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer, int mipLevel, UnityEngine.CubemapFace face) => throw new NotImplementedException();
		public static void SetRenderTarget(FL_UnityEngine.RenderTexture rt, int mipLevel, UnityEngine.CubemapFace face, int depthSlice) => throw new NotImplementedException();
		public static void SetRenderTarget(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer, int mipLevel, UnityEngine.CubemapFace face, int depthSlice) => throw new NotImplementedException();
		public static void SetRenderTarget(UnityEngine.RenderBuffer[] colorBuffers, UnityEngine.RenderBuffer depthBuffer) => throw new NotImplementedException();
		public static void SetRenderTarget(UnityEngine.RenderTargetSetup setup) => throw new NotImplementedException();
		public static void WaitOnGPUFence(UnityEngine.Rendering.GPUFence fence, UnityEngine.Rendering.SynchronisationStage stage) => throw new NotImplementedException();
		public static void WaitOnGPUFence(UnityEngine.Rendering.GPUFence fence) => throw new NotImplementedException();
		public static UnityEngine.RenderBuffer activeColorBuffer => throw new NotImplementedException();
		public static UnityEngine.ColorGamut activeColorGamut => throw new NotImplementedException();
		public static UnityEngine.RenderBuffer activeDepthBuffer => throw new NotImplementedException();
		public static UnityEngine.Rendering.GraphicsTier activeTier { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
	}
}
