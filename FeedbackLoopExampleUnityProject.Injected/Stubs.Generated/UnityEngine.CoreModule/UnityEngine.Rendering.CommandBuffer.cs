using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace FL_UnityEngine.Rendering
{
	public unsafe partial class CommandBuffer {
		//public CommandBuffer() { }
		public void BeginSample(string name) => throw new NotImplementedException();
		public void Blit(FL_UnityEngine.Texture source, UnityEngine.Rendering.RenderTargetIdentifier dest) => throw new NotImplementedException();
		public void Blit(FL_UnityEngine.Texture source, UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset) => throw new NotImplementedException();
		public void Blit(FL_UnityEngine.Texture source, UnityEngine.Rendering.RenderTargetIdentifier dest, FL_UnityEngine.Material mat) => throw new NotImplementedException();
		public void Blit(FL_UnityEngine.Texture source, UnityEngine.Rendering.RenderTargetIdentifier dest, FL_UnityEngine.Material mat, int pass) => throw new NotImplementedException();
		public void Blit(UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest) => throw new NotImplementedException();
		public void Blit(UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset) => throw new NotImplementedException();
		public void Blit(UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest, FL_UnityEngine.Material mat) => throw new NotImplementedException();
		public void Blit(UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest, FL_UnityEngine.Material mat, int pass) => throw new NotImplementedException();
		public void Clear() => throw new NotImplementedException();
		public void ClearRandomWriteTargets() => throw new NotImplementedException();
		public void ClearRenderTarget(bool clearDepth, bool clearColor, UnityEngine.Color backgroundColor, float depth) => throw new NotImplementedException();
		public void ClearRenderTarget(bool clearDepth, bool clearColor, UnityEngine.Color backgroundColor) => throw new NotImplementedException();
		public void ConvertTexture(UnityEngine.Rendering.RenderTargetIdentifier src, UnityEngine.Rendering.RenderTargetIdentifier dst) => throw new NotImplementedException();
		public void ConvertTexture(UnityEngine.Rendering.RenderTargetIdentifier src, int srcElement, UnityEngine.Rendering.RenderTargetIdentifier dst, int dstElement) => throw new NotImplementedException();
		public void CopyCounterValue(FL_UnityEngine.ComputeBuffer src, FL_UnityEngine.ComputeBuffer dst, System.UInt32 dstOffsetBytes) => throw new NotImplementedException();
		public void CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier src, UnityEngine.Rendering.RenderTargetIdentifier dst) => throw new NotImplementedException();
		public void CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier src, int srcElement, UnityEngine.Rendering.RenderTargetIdentifier dst, int dstElement) => throw new NotImplementedException();
		public void CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier src, int srcElement, int srcMip, UnityEngine.Rendering.RenderTargetIdentifier dst, int dstElement, int dstMip) => throw new NotImplementedException();
		public void CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, UnityEngine.Rendering.RenderTargetIdentifier dst, int dstElement, int dstMip, int dstX, int dstY) => throw new NotImplementedException();
		public UnityEngine.Rendering.GPUFence CreateGPUFence(UnityEngine.Rendering.SynchronisationStage stage) => throw new NotImplementedException();
		public UnityEngine.Rendering.GPUFence CreateGPUFence() => throw new NotImplementedException();
		public void DisableScissorRect() => throw new NotImplementedException();
		public void DisableShaderKeyword(string keyword) => throw new NotImplementedException();
		public void DispatchCompute(FL_UnityEngine.ComputeShader computeShader, int kernelIndex, int threadGroupsX, int threadGroupsY, int threadGroupsZ) => throw new NotImplementedException();
		public void DispatchCompute(FL_UnityEngine.ComputeShader computeShader, int kernelIndex, FL_UnityEngine.ComputeBuffer indirectBuffer, System.UInt32 argsOffset) => throw new NotImplementedException();
		public virtual void Dispose() => throw new NotImplementedException();
		public void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int submeshIndex, int shaderPass, FL_UnityEngine.MaterialPropertyBlock properties) => throw new NotImplementedException();
		public void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int submeshIndex, int shaderPass) => throw new NotImplementedException();
		public void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int submeshIndex) => throw new NotImplementedException();
		public void DrawMesh(FL_UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material) => throw new NotImplementedException();
		public void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, int shaderPass, UnityEngine.Matrix4x4[] matrices, int count, FL_UnityEngine.MaterialPropertyBlock properties) => throw new NotImplementedException();
		public void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, int shaderPass, UnityEngine.Matrix4x4[] matrices, int count) => throw new NotImplementedException();
		public void DrawMeshInstanced(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, int shaderPass, UnityEngine.Matrix4x4[] matrices) => throw new NotImplementedException();
		public void DrawMeshInstancedIndirect(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, int shaderPass, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, FL_UnityEngine.MaterialPropertyBlock properties) => throw new NotImplementedException();
		public void DrawMeshInstancedIndirect(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, int shaderPass, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset) => throw new NotImplementedException();
		public void DrawMeshInstancedIndirect(FL_UnityEngine.Mesh mesh, int submeshIndex, FL_UnityEngine.Material material, int shaderPass, FL_UnityEngine.ComputeBuffer bufferWithArgs) => throw new NotImplementedException();
		public void DrawProcedural(UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int vertexCount, int instanceCount, FL_UnityEngine.MaterialPropertyBlock properties) => throw new NotImplementedException();
		public void DrawProcedural(UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int vertexCount, int instanceCount) => throw new NotImplementedException();
		public void DrawProcedural(UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int vertexCount) => throw new NotImplementedException();
		public void DrawProceduralIndirect(UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, FL_UnityEngine.MaterialPropertyBlock properties) => throw new NotImplementedException();
		public void DrawProceduralIndirect(UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, FL_UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset) => throw new NotImplementedException();
		public void DrawProceduralIndirect(UnityEngine.Matrix4x4 matrix, FL_UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, FL_UnityEngine.ComputeBuffer bufferWithArgs) => throw new NotImplementedException();
		public void DrawRenderer(FL_UnityEngine.Renderer renderer, FL_UnityEngine.Material material, int submeshIndex, int shaderPass) => throw new NotImplementedException();
		public void DrawRenderer(FL_UnityEngine.Renderer renderer, FL_UnityEngine.Material material, int submeshIndex) => throw new NotImplementedException();
		public void DrawRenderer(FL_UnityEngine.Renderer renderer, FL_UnityEngine.Material material) => throw new NotImplementedException();
		public void EnableScissorRect(UnityEngine.Rect scissor) => throw new NotImplementedException();
		public void EnableShaderKeyword(string keyword) => throw new NotImplementedException();
		public void EndSample(string name) => throw new NotImplementedException();
		public void GenerateMips(FL_UnityEngine.RenderTexture rt) => throw new NotImplementedException();
		public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite, UnityEngine.RenderTextureMemoryless memorylessMode, bool useDynamicScale) => throw new NotImplementedException();
		public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite, UnityEngine.RenderTextureMemoryless memorylessMode) => throw new NotImplementedException();
		public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite) => throw new NotImplementedException();
		public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing) => throw new NotImplementedException();
		public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite) => throw new NotImplementedException();
		public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format) => throw new NotImplementedException();
		public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter) => throw new NotImplementedException();
		public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer) => throw new NotImplementedException();
		public void GetTemporaryRT(int nameID, int width, int height) => throw new NotImplementedException();
		public void GetTemporaryRT(int nameID, UnityEngine.RenderTextureDescriptor desc, UnityEngine.FilterMode filter) => throw new NotImplementedException();
		public void GetTemporaryRT(int nameID, UnityEngine.RenderTextureDescriptor desc) => throw new NotImplementedException();
		public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite) => throw new NotImplementedException();
		public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing) => throw new NotImplementedException();
		public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite) => throw new NotImplementedException();
		public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format) => throw new NotImplementedException();
		public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter) => throw new NotImplementedException();
		public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer) => throw new NotImplementedException();
		public void GetTemporaryRTArray(int nameID, int width, int height, int slices) => throw new NotImplementedException();
		public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite, bool useDynamicScale) => throw new NotImplementedException();
		public void IssuePluginCustomBlit(System.IntPtr callback, System.UInt32 command, UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest, System.UInt32 commandParam, System.UInt32 commandFlags) => throw new NotImplementedException();
		public void IssuePluginCustomTextureUpdateV2(System.IntPtr callback, FL_UnityEngine.Texture targetTexture, System.UInt32 userData) => throw new NotImplementedException();
		public void IssuePluginEvent(System.IntPtr callback, int eventID) => throw new NotImplementedException();
		public void IssuePluginEventAndData(System.IntPtr callback, int eventID, System.IntPtr data) => throw new NotImplementedException();
		public void Release() => throw new NotImplementedException();
		public void ReleaseTemporaryRT(int nameID) => throw new NotImplementedException();
		public void RequestAsyncReadback(FL_UnityEngine.ComputeBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback) => throw new NotImplementedException();
		public void RequestAsyncReadback(FL_UnityEngine.ComputeBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback) => throw new NotImplementedException();
		public void RequestAsyncReadback(FL_UnityEngine.Texture src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback) => throw new NotImplementedException();
		public void RequestAsyncReadback(FL_UnityEngine.Texture src, int mipIndex, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback) => throw new NotImplementedException();
		public void RequestAsyncReadback(FL_UnityEngine.Texture src, int mipIndex, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback) => throw new NotImplementedException();
		public void RequestAsyncReadback(FL_UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback) => throw new NotImplementedException();
		public void RequestAsyncReadback(FL_UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback) => throw new NotImplementedException();
		public void ResolveAntiAliasedSurface(FL_UnityEngine.RenderTexture rt, FL_UnityEngine.RenderTexture target) => throw new NotImplementedException();
		public void SetComputeBufferParam(FL_UnityEngine.ComputeShader computeShader, int kernelIndex, string name, FL_UnityEngine.ComputeBuffer buffer) => throw new NotImplementedException();
		public void SetComputeBufferParam(FL_UnityEngine.ComputeShader computeShader, int kernelIndex, int nameID, FL_UnityEngine.ComputeBuffer buffer) => throw new NotImplementedException();
		public void SetComputeFloatParam(FL_UnityEngine.ComputeShader computeShader, string name, float val) => throw new NotImplementedException();
		public void SetComputeFloatParam(FL_UnityEngine.ComputeShader computeShader, int nameID, float val) => throw new NotImplementedException();
		public void SetComputeFloatParams(FL_UnityEngine.ComputeShader computeShader, string name, float[] values) => throw new NotImplementedException();
		public void SetComputeFloatParams(FL_UnityEngine.ComputeShader computeShader, int nameID, float[] values) => throw new NotImplementedException();
		public void SetComputeIntParam(FL_UnityEngine.ComputeShader computeShader, string name, int val) => throw new NotImplementedException();
		public void SetComputeIntParam(FL_UnityEngine.ComputeShader computeShader, int nameID, int val) => throw new NotImplementedException();
		public void SetComputeIntParams(FL_UnityEngine.ComputeShader computeShader, string name, int[] values) => throw new NotImplementedException();
		public void SetComputeIntParams(FL_UnityEngine.ComputeShader computeShader, int nameID, int[] values) => throw new NotImplementedException();
		public void SetComputeMatrixArrayParam(FL_UnityEngine.ComputeShader computeShader, string name, UnityEngine.Matrix4x4[] values) => throw new NotImplementedException();
		public void SetComputeMatrixArrayParam(FL_UnityEngine.ComputeShader computeShader, int nameID, UnityEngine.Matrix4x4[] values) => throw new NotImplementedException();
		public void SetComputeMatrixParam(FL_UnityEngine.ComputeShader computeShader, string name, UnityEngine.Matrix4x4 val) => throw new NotImplementedException();
		public void SetComputeMatrixParam(FL_UnityEngine.ComputeShader computeShader, int nameID, UnityEngine.Matrix4x4 val) => throw new NotImplementedException();
		public void SetComputeTextureParam(FL_UnityEngine.ComputeShader computeShader, int kernelIndex, string name, UnityEngine.Rendering.RenderTargetIdentifier rt) => throw new NotImplementedException();
		public void SetComputeTextureParam(FL_UnityEngine.ComputeShader computeShader, int kernelIndex, int nameID, UnityEngine.Rendering.RenderTargetIdentifier rt) => throw new NotImplementedException();
		public void SetComputeTextureParam(FL_UnityEngine.ComputeShader computeShader, int kernelIndex, string name, UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel) => throw new NotImplementedException();
		public void SetComputeTextureParam(FL_UnityEngine.ComputeShader computeShader, int kernelIndex, int nameID, UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel) => throw new NotImplementedException();
		public void SetComputeVectorArrayParam(FL_UnityEngine.ComputeShader computeShader, string name, UnityEngine.Vector4[] values) => throw new NotImplementedException();
		public void SetComputeVectorArrayParam(FL_UnityEngine.ComputeShader computeShader, int nameID, UnityEngine.Vector4[] values) => throw new NotImplementedException();
		public void SetComputeVectorParam(FL_UnityEngine.ComputeShader computeShader, string name, UnityEngine.Vector4 val) => throw new NotImplementedException();
		public void SetComputeVectorParam(FL_UnityEngine.ComputeShader computeShader, int nameID, UnityEngine.Vector4 val) => throw new NotImplementedException();
		public void SetGlobalBuffer(string name, FL_UnityEngine.ComputeBuffer value) => throw new NotImplementedException();
		public void SetGlobalBuffer(int nameID, FL_UnityEngine.ComputeBuffer value) => throw new NotImplementedException();
		public void SetGlobalColor(string name, UnityEngine.Color value) => throw new NotImplementedException();
		public void SetGlobalColor(int nameID, UnityEngine.Color value) => throw new NotImplementedException();
		public void SetGlobalDepthBias(float bias, float slopeBias) => throw new NotImplementedException();
		public void SetGlobalFloat(string name, float value) => throw new NotImplementedException();
		public void SetGlobalFloat(int nameID, float value) => throw new NotImplementedException();
		public void SetGlobalFloatArray(string propertyName, System.Collections.Generic.List<float> values) => throw new NotImplementedException();
		public void SetGlobalFloatArray(int nameID, System.Collections.Generic.List<float> values) => throw new NotImplementedException();
		public void SetGlobalFloatArray(string propertyName, float[] values) => throw new NotImplementedException();
		public void SetGlobalFloatArray(int nameID, float[] values) => throw new NotImplementedException();
		public void SetGlobalInt(string name, int value) => throw new NotImplementedException();
		public void SetGlobalInt(int nameID, int value) => throw new NotImplementedException();
		public void SetGlobalMatrix(string name, UnityEngine.Matrix4x4 value) => throw new NotImplementedException();
		public void SetGlobalMatrix(int nameID, UnityEngine.Matrix4x4 value) => throw new NotImplementedException();
		public void SetGlobalMatrixArray(string propertyName, System.Collections.Generic.List<UnityEngine.Matrix4x4> values) => throw new NotImplementedException();
		public void SetGlobalMatrixArray(int nameID, System.Collections.Generic.List<UnityEngine.Matrix4x4> values) => throw new NotImplementedException();
		public void SetGlobalMatrixArray(string propertyName, UnityEngine.Matrix4x4[] values) => throw new NotImplementedException();
		public void SetGlobalMatrixArray(int nameID, UnityEngine.Matrix4x4[] values) => throw new NotImplementedException();
		public void SetGlobalTexture(string name, UnityEngine.Rendering.RenderTargetIdentifier value) => throw new NotImplementedException();
		public void SetGlobalTexture(int nameID, UnityEngine.Rendering.RenderTargetIdentifier value) => throw new NotImplementedException();
		public void SetGlobalVector(string name, UnityEngine.Vector4 value) => throw new NotImplementedException();
		public void SetGlobalVector(int nameID, UnityEngine.Vector4 value) => throw new NotImplementedException();
		public void SetGlobalVectorArray(string propertyName, System.Collections.Generic.List<UnityEngine.Vector4> values) => throw new NotImplementedException();
		public void SetGlobalVectorArray(int nameID, System.Collections.Generic.List<UnityEngine.Vector4> values) => throw new NotImplementedException();
		public void SetGlobalVectorArray(string propertyName, UnityEngine.Vector4[] values) => throw new NotImplementedException();
		public void SetGlobalVectorArray(int nameID, UnityEngine.Vector4[] values) => throw new NotImplementedException();
		public void SetInvertCulling(bool invertCulling) => throw new NotImplementedException();
		public void SetProjectionMatrix(UnityEngine.Matrix4x4 proj) => throw new NotImplementedException();
		public void SetRandomWriteTarget(int index, UnityEngine.Rendering.RenderTargetIdentifier rt) => throw new NotImplementedException();
		public void SetRandomWriteTarget(int index, FL_UnityEngine.ComputeBuffer buffer, bool preserveCounterValue) => throw new NotImplementedException();
		public void SetRandomWriteTarget(int index, FL_UnityEngine.ComputeBuffer buffer) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier rt) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier rt, UnityEngine.Rendering.RenderBufferLoadAction loadAction, UnityEngine.Rendering.RenderBufferStoreAction storeAction) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier rt, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel, UnityEngine.CubemapFace cubemapFace) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel, UnityEngine.CubemapFace cubemapFace, int depthSlice) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderTargetIdentifier depth) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderTargetIdentifier depth, int mipLevel) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderTargetIdentifier depth, int mipLevel, UnityEngine.CubemapFace cubemapFace) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderTargetIdentifier depth, int mipLevel, UnityEngine.CubemapFace cubemapFace, int depthSlice) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderTargetIdentifier depth, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier[] colors, UnityEngine.Rendering.RenderTargetIdentifier depth) => throw new NotImplementedException();
		public void SetRenderTarget(UnityEngine.Rendering.RenderTargetBinding binding) => throw new NotImplementedException();
		public void SetShadowSamplingMode(UnityEngine.Rendering.RenderTargetIdentifier shadowmap, UnityEngine.Rendering.ShadowSamplingMode mode) => throw new NotImplementedException();
		public void SetViewMatrix(UnityEngine.Matrix4x4 view) => throw new NotImplementedException();
		public void SetViewport(UnityEngine.Rect pixelRect) => throw new NotImplementedException();
		public void SetViewProjectionMatrices(UnityEngine.Matrix4x4 view, UnityEngine.Matrix4x4 proj) => throw new NotImplementedException();
		public void WaitOnGPUFence(UnityEngine.Rendering.GPUFence fence, UnityEngine.Rendering.SynchronisationStage stage) => throw new NotImplementedException();
		public void WaitOnGPUFence(UnityEngine.Rendering.GPUFence fence) => throw new NotImplementedException();
		public string name { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
		public int sizeInBytes => throw new NotImplementedException();
	}
}
